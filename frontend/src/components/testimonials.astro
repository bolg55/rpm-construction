---
const { testimonials, numberOfColumns } = Astro.props;

interface Testimonial {
  id: number;
  review: string;
  name: string;
  isFeatured: boolean;
}
interface Props {
  testimonials: Testimonial[];
  numberOfColumns: number;
}

function cn(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}

// Group testimonials into columns based on the number of columns provided as an argument
// This function will return an array of arrays, where each array represents a column
// and contains the testimonials that should be displayed in that column
// The number of columns will determine the layout of the testimonials on the page
// For example, if there are 8 testimonials and 4 columns, the function will return
// 4 arrays, each containing 2 testimonials

const groupTestimonials = (
  testimonials: Testimonial[],
  numberOfColumns: number
) => {
  const columns: Testimonial[][] = Array.from(
    { length: numberOfColumns },
    () => []
  );

  testimonials.forEach((testimonial, index) => {
    columns[index % numberOfColumns].push(testimonial);
  });

  const nestedTestimonials = [];
  for (let i = 0; i < numberOfColumns; i += 2) {
    nestedTestimonials.push(columns.slice(i, i + 2));
  }

  return nestedTestimonials;
};

const featuredTestimonial = testimonials.find(
  (testimonial) => testimonial.isFeatured
);

const regularTestimonials = testimonials.filter(
  (testimonial) => !testimonial.isFeatured
);

const nestedTestimonials = groupTestimonials(
  regularTestimonials,
  numberOfColumns
);
---

<div
  class='mx-auto mt-16 grid max-w-4xl grid-cols-1 grid-rows-1 gap-8 text-sm leading-6 text-primary sm:mt-20 sm:grid-cols-2 xl:mx-0 xl:max-w-none xl:grid-flow-col xl:grid-cols-4'
>
  <!-- Featured Testimonial -->
  <figure
    class='hover:scale-105 ease-linear hover:cursor-auto transition-all duration-200 rounded-2xl bg-white shadow-lg ring-1 ring-primary/5 sm:col-span-2 xl:col-start-2 xl:row-end-1'
  >
    <blockquote
      class='p-6 text-lg font-semibold leading-7 tracking-tight text-primary sm:p-12 sm:text-xl sm:leading-8'
    >
      <p>{`“${featuredTestimonial?.review}”`}</p>
    </blockquote>
    <figcaption
      class='flex flex-wrap items-center gap-x-4 gap-y-4 border-t border-primary/10 px-6 py-4 sm:flex-nowrap'
    >
      <div class='flex-auto'>
        <div class='font-semibold'>- {featuredTestimonial?.name}</div>
      </div>
    </figcaption>
  </figure>

  <!-- Map over nestedTestimonials -->
  {
    nestedTestimonials.map((columnGroup, columnGroupIdx) => (
      <div key={columnGroupIdx} class='space-y-8 xl:contents xl:space-y-0'>
        {columnGroup.map((column, columnIdx) => (
          <div
            key={columnIdx}
            class={cn(
              (columnGroupIdx === 0 && columnIdx === 0) ||
                (columnGroupIdx === nestedTestimonials.length - 1 &&
                  columnIdx === columnGroup.length - 1)
                ? 'xl:row-span-2'
                : 'xl:row-start-1',
              'space-y-8'
            )}
          >
            {column.map((testimonial) => (
              <figure
                key={testimonial.id}
                class='rounded-2xl bg-white hover:scale-105 ease-linear hover:cursor-auto transition-all duration-200 p-6 shadow-lg ring-1 ring-primary/5'
              >
                <blockquote class='text-primary'>
                  <p>{`“${testimonial.review}”`}</p>
                </blockquote>
                <figcaption class='mt-6 flex items-center gap-x-4'>
                  <div>
                    <div class='font-semibold'>- {testimonial.name}</div>
                  </div>
                </figcaption>
              </figure>
            ))}
          </div>
        ))}
      </div>
    ))
  }
</div>
